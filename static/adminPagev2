import tkinter as tk
from tkinter import ttk
from tkinter import Toplevel

'''
Author Jevhan Seechurn,
Date: 13/12/2023 3am lmao
Version: 1.0
'''
# Dummy values for the database 
staffData = [
    [987654, "Alice Smith", "Front of house", "54321","London"],
    [234567, "Bob Johnson", "Manager", "23456","London"],
    [345678, "Eva Williams", "Chef", "34567","London"],
    [661144, "Grace Clark", "Manager", "66114","London"],
    [883322, "Jack Wright", "Chef", "88332","London"],
    [990044, "Ava Scott", "Front of house", "99004","London"],
    [557788, "Lucas Green", "Kitchen staff", "55778","London"],
    [112211, "Liam Turner", "Chef", "11221","London"],
    [334433, "Olivia Hall", "Front of house", "33443","London"],
    [556699, "Jessica Adams", "Kitchen staff", "55669","London"],
    [770011, "Noah Parker", "Manager", "77001","London"],
    [889922, "Isabella Carter", "Chef", "88992","London"],
    [556677, "Emily Garcia", "Kitchen staff", "55667","London"],
    [778899, "Michael Lee", "Manager", "77889","London"],
    [990011, "Abigail Rodriguez", "Chef", "99001","London"],
    [224466, "Sophie Harris", "Front of house", "22446","London"],
    [448822, "Alexander King", "Kitchen staff", "44882","London"],
    [456789, "David Brown", "Kitchen staff", "45678","London"],
    [567890, "Sophia Davis", "Front of house", "56789","London"],
    [678901, "Oliver Wilson", "Chef", "67890","London"],
    [789012, "Mia Martinez", "Kitchen staff", "78901","London"],
    [890123, "William Anderson", "Manager", "89012","London"],
    [901234, "Charlotte Taylor", "Front of house", "90123","London"],
    [112233, "Amelia Thomas", "Chef", "11223","London"],
    [334455, "James White", "Front of house", "33445","London"],
]

inv_data = [
    ['123', 'Carrots', '123', '123', 'ingredient'],
    ['456', 'Apples', '456', '456', 'ingredient'],
    ['789', 'Oranges', '789', '789', 'ingredient'],
    ['111', 'Bananas', '111', '111', 'ingredient'],
    ['222', 'Berries', '222', '222', 'ingredient'],
    ['333', 'Grapes', '333', '333', 'ingredient'],
    ['444', 'Pineapple', '444', '444', 'ingredient'],
    ['555', 'Watermelon', '555', '555', 'ingredient'],
    ['666', 'Peaches', '666', '666', 'ingredient'],
    ['777', 'Plums', '777', '777', 'ingredient'],
    ['888', 'Kiwi', '888', '888', 'ingredient'],
    ['999', 'Mango', '999', '999', 'ingredient'],
    ['101', 'Strawberries', '101', '101', 'ingredient'],
    ['202', 'Blueberries', '202', '202', 'ingredient'],
    ['303', 'Raspberries', '303', '303', 'ingredient'],
    ['404', 'Blackberries', '404', '404', 'ingredient'],
    ['505', 'Pears', '505', '505', 'ingredient'],
    ['606', 'Cherries', '606', '606', 'ingredient'],
    ['707', 'Lemons', '707', '707', 'ingredient'],
    ['808', 'Limes', '808', '808', 'ingredient'],
    ['909', 'Spoons', '909', '909', 'equipment'],
    ['010', 'Forks', '010', '010', 'equipment'],
    ['111', 'Knives', '111', '111', 'equipment'],
    ['212', 'Plates', '212', '212', 'equipment'],
    ['313', 'Bowls', '313', '313', 'equipment']
]

class App(tk.Tk):
    def __init__(self):
        super().__init__()
        self.geometry("800x600")
        self.title('Admin Feature')
        self.configure(bg='white')
        self.topbar()
        self.bottombar()
        self.Sidebar()
        self.staff_button_frame()
        self.staff_table_space()
        self.inv_button_frame()
        self.inv_table_space()
 
    # button functions

    def home_btn(self):
        print("home button clicked")


    def staff_edit(self):
        print("Staff Edit button clicked")
        self.inventory_frame.pack_forget()
        self.inventory_table_frame.pack_forget()
        self.staff_frame.pack()
        self.staff_table_frame.pack()

    def menu_edit(self):
        print("Menu Edit button clicked")
        self.staff_frame.pack_forget()
        self.staff_table_frame.pack_forget()
        self.inventory_frame.pack()
        self.inventory_table_frame.pack()

    # Add Staff Window ------------------------------------------------------------------------------------------------------------------------------------------------|

    def add_staff_pop(self):
        def destroy_window():
            self.staff_window.destroy()
    
        self.staff_window = Toplevel(self)
        self.staff_window.title("Staff add")
        self.staff_window.geometry('250x400')
        self.staff_window.configure(bg='white')
        self.staff_window.resizable(False, False)
    
        add_title = tk.Label(self.staff_window, text='Add Staff', fg='black', bg='white', font=("Arial", 18))
        add_title.pack(pady=10)

        add_resturant_option = tk.Label(self.staff_window, text='Restaurant:', fg='black', bg='white', font=("Arial", 14))
        add_resturant_option.pack(pady=10)

        option = ['London', 'Cardiff', "Ur mom's House", 'Manchester', 'Bristol']
        restaurant_option = tk.StringVar(self.staff_window)
        restaurant_option.set(option[0])  

        restaurant_option = tk.OptionMenu(self.staff_window, restaurant_option, *option)
        restaurant_option.configure(bg='white',fg='black',width=10)
        restaurant_option.pack()
    
        add_name = tk.Label(self.staff_window, text='Full name:', fg='black', bg='white', font=("Arial", 14))
        add_name.pack(pady=10)
    
        name_box = tk.Entry(self.staff_window, width=14, fg='black', bg='lightgrey', borderwidth=0, border=None)
        name_box.pack()
    
        add_role = tk.Label(self.staff_window, text='Role:', fg='black', bg='white', font=("Arial", 14))
        add_role.pack(pady=10)
    
        role_box = tk.Entry(self.staff_window, width=14, fg='black', bg='lightgrey', borderwidth=0)
        role_box.pack()
    
        add_password = tk.Label(self.staff_window, text='Password:', fg='black', bg='white', font=("Arial", 14))
        add_password.pack(pady=10)
    
        password_box = tk.Entry(self.staff_window, width=14, fg='black', bg='lightgrey', borderwidth=0)
        password_box.pack()
    
        # Function to close the current window when the 'Add Staff' button is clicked
        submit = tk.Button(self.staff_window, width=4, height=2, text='Submit', borderwidth=0,
                           command=lambda: [self.add_staff_record(name_box, role_box, password_box), destroy_window()])
        submit.pack(pady=20)
    def add_inventory_pop(self):
        def destroy_window():
            self.inventory_window.destroy()

        self.inventory_window = Toplevel(self)
        self.inventory_window.title("Inventory add")
        self.inventory_window.geometry('250x400')
        self.inventory_window.configure(bg='white')
        self.inventory_window.resizable(False, False)
    
        add_title = tk.Label(self.staff_window, text='New Inventory', fg='black', bg='white', font=("Arial", 18))
        add_title.pack(pady=10)
    
        add_name = tk.Label(self.staff_window, text='Item name:', fg='black', bg='white', font=("Arial", 14))
        add_name.pack(pady=10)
    
        name_box = tk.Entry(self.staff_window, width=14, fg='black', bg='lightgrey', borderwidth=0, border=None)
        name_box.pack()
    
        add_qty = tk.Label(self.staff_window, text='Quantity:', fg='black', bg='white', font=("Arial", 14))
        add_qty.pack(pady=10)
    
        qty_box = tk.Entry(self.staff_window, width=14, fg='black', bg='lightgrey', borderwidth=0)
        qty_box.pack()
    
        add_reorder = tk.Label(self.staff_window, text='Re-order level:', fg='black', bg='white', font=("Arial", 14))
        add_reorder.pack(pady=10)

        reorder_box = tk.Entry(self.staff_window, width=14, fg='black', bg='lightgrey', borderwidth=0)
        reorder_box.pack()

        inv_type = tk.Label(self.staff_window, text='Type:', fg='black', bg='white', font=("Arial", 14))
        inv_type.pack(pady=10)
    
        type_box = tk.Entry(self.staff_window, width=14, fg='black', bg='lightgrey', borderwidth=0)
        type_box.pack()
    
        # Function to close the current window when the 'Add Staff' button is clicked
        submit = tk.Button(self.staff_window, width=4, height=2, text='Submit', borderwidth=0,
                           command=lambda: [self.add_staff_record(name_box, qty_box, reorder_box,type_box), destroy_window()])
        submit.pack(pady=20)
        

    # Top bar ---------------------------------------------------------------------------------------------------------------------------------------------------------|

    def topbar(self):
        topFrame = tk.Frame(self, borderwidth=25, relief=tk.FLAT, bg='#1A1A1A')
        topFrame.pack(fill=tk.X)

        label = tk.Label(topFrame, text="Horizon Restaurant", fg='white', bg='#1A1A1A', anchor='w', font=('Arial', 25), underline=True)
        label.pack(fill=tk.BOTH, expand=True)

        top_underline = tk.Canvas(topFrame, height=2, bg='#1A1A1A', highlightthickness=0)
        top_underline.create_line(4, 2, 218, 2, width=2, fill='white')
        top_underline.pack(fill=tk.X)

        username = tk.Label(topFrame, text=" Admin: Alex Rogers ", fg='white', bg='#1A1A1A', font=('Arial', 14))
        username.pack(side=tk.RIGHT, anchor='e')
        username.place(relx=1.0, rely=0.5, anchor='e', x=-110, y=4)

        user_id = tk.Label(topFrame, text="ID: 193812", fg='white', bg='#1A1A1A', font=('Arial', 14))
        user_id.pack(side=tk.RIGHT, anchor='e')
        user_id.place(relx=1.0, rely=0.5, anchor='e', x=-10, y=4)

    def Sidebar(self):
        Sidebar = tk.Frame(self, height=478, bg='#474747')
        Sidebar.pack(fill=tk.Y, side=tk.LEFT)

        side_label = tk.Label(Sidebar,text="Admin Features",fg='white', bg='#474747', anchor='w', font=('Arial', 18),width=13)
        side_label.pack(padx=45,pady=15)


        staff_edit = tk.Button(Sidebar, text='Staff', command=self.staff_edit, bd=0, highlightthickness=0,highlightbackground='#2976E9', pady=10, border=None,width=15)
        staff_edit.pack(pady=30)

        menu_edit = tk.Button(Sidebar, text='Menu', command=self.menu_edit, bd=0, highlightthickness=0,highlightbackground='#2976E9', pady=10, border=None,width=15)
        menu_edit.pack(pady=30)

        home_btn = tk.Button(Sidebar, text='Home', command=self.home_btn, bd=0, highlightthickness=0,highlightbackground='#2976E9', pady=10, border=None,width=15)
        home_btn.pack(pady=30)

    # Staff button / Tree view  ----------------------------------------------------------------------------------------------------------------------------------------------------------------|

    def staff_button_frame(self):
        self.staff_frame = tk.Frame(self, borderwidth=25, relief=tk.FLAT, bg='white', height=120, width=480)
        self.staff_frame.pack(pady=10)
        self.staff_frame.lower()

        frame_label = tk.Label(self.staff_frame, text='Staff Management', fg='black', bg='white', font=("Arial", 18))
        frame_label.pack(pady=10)

        add_staff = tk.Button(self.staff_frame, text='Add', bd=0, highlightthickness=0, highlightbackground='#2976E9', pady=10, border=None, width=5,command=self.add_staff_pop)
        add_staff.pack(side=tk.LEFT,padx=6)

        remove_staff = tk.Button(self.staff_frame, text='Delete', bd=0, highlightthickness=0, highlightbackground='#2976E9', pady=10, border=None, width=5)
        remove_staff.pack(side=tk.LEFT,padx=6)

        # edit_staff = tk.Button(self.staff_frame, text='Edit', bd=0, highlightthickness=0, highlightbackground='#2976E9', pady=10, border=None, width=5)
        # edit_staff.pack(side=tk.LEFT,padx=6)

        options = ['All', 'Manager', 'Chef', 'Front of house', 'Kitchen staff']
        selected_option = tk.StringVar(self.staff_frame)
        selected_option.set(options[0])  # Set default value

        option_menu = tk.OptionMenu(self.staff_frame, selected_option, *options)
        option_menu.configure(bg='white',fg='black',width=10)
        option_menu.pack(anchor='s')
    
    def staff_table_space(self):
        self.staff_table_frame = tk.Frame(self, borderwidth=25, relief=tk.FLAT, bg='white', height=300, width=480)
        self.staff_table_frame.pack(pady=10)
        self.staff_table_frame.lower()

        self.staff_tree = ttk.Treeview(self.staff_table_frame, height=15)
        self.staff_tree['columns'] = ("ID", "Name", "Role", "Password", "Restaurant")
        column_width = 110

        # Formatting columns
        self.staff_tree.column("#0", width=0, minwidth=0)
        self.staff_tree.column("ID", anchor='center', width=90, minwidth=90)
        self.staff_tree.column("Name", anchor='w', width=column_width, minwidth=column_width)
        self.staff_tree.column("Role", anchor='w', width=column_width, minwidth=column_width)
        self.staff_tree.column("Password", anchor='center', width=column_width, minwidth=column_width)
        self.staff_tree.column("Restaurant", anchor='w', width=column_width, minwidth=column_width)

        # Formatting Headers 
        self.staff_tree.heading("ID", text="Staff ID", anchor='w')
        self.staff_tree.heading("Name", text="Staff Name", anchor='center')
        self.staff_tree.heading("Role", text="Role", anchor='center')
        self.staff_tree.heading("Password", text="Password", anchor='e')
        self.staff_tree.heading("Restaurant", text="Restaurant", anchor='e')

        # Add tag configurations for odd and even rows
        self.staff_tree.tag_configure('oddrow', background='white', foreground='black')
        self.staff_tree.tag_configure('evenrow', background='lightgray', foreground='black')

        # For loop to generate the values in the database 
        count = 0
        for record in staffData:
            tag = 'evenrow' if count % 2 == 0 else 'oddrow'
            self.staff_tree.insert(parent='', index='end', iid=count, text="", values=(record[0], record[1], record[2], record[3], record[4]), tags=(tag,))
            count += 1

        self.staff_tree.bind("<Double-1>", self.onDoubleClickStaff)

        self.staff_tree.pack(pady=10)

   # Inventory button / Tree view  ----------------------------------------------------------------------------------------------------------------------------------------------------------------|

    def inv_button_frame(self):
        self.inventory_frame = tk.Frame(self, borderwidth=25, relief=tk.FLAT, bg='white', height=120, width=480)
        self.inventory_frame.pack()
        self.inventory_frame.lower()

        frame_label = tk.Label(self.inventory_frame, text='Inventory Management', fg='black', bg='white', font=("Arial", 18))
        frame_label.pack(pady=10)

        add_staff = tk.Button(self.inventory_frame, text='Add', bd=0, highlightthickness=0, highlightbackground='#2976E9', pady=10, border=None, width=5,command=self.add_inventory_pop)
        add_staff.pack(side=tk.LEFT,padx=6)

        remove_staff = tk.Button(self.inventory_frame, text='Delete', bd=0, highlightthickness=0, highlightbackground='#2976E9', pady=10, border=None, width=5)
        remove_staff.pack(side=tk.LEFT,padx=6)

        # edit_staff = tk.Button(self.inventory_frame, text='Edit', bd=0, highlightthickness=0, highlightbackground='#2976E9', pady=10, border=None, width=5)
        # edit_staff.pack(side=tk.LEFT,padx=6)

        options = ['All', 'Ingredient','Equipment']
        selected_option = tk.StringVar(self.inventory_frame)
        selected_option.set(options[0])  # Set default value

        option_menu = tk.OptionMenu(self.inventory_frame, selected_option, *options)
        option_menu.configure(bg='white',fg='black',width=10)
        option_menu.pack(anchor='s')

    def inv_table_space(self):
        self.inventory_table_frame = tk.Frame(self, borderwidth=25, relief=tk.FLAT, bg='white', height=300, width=480)
        self.inventory_table_frame.pack(pady=10)
        self.inventory_table_frame.lower()

        self.inventory_tree = ttk.Treeview( self.inventory_table_frame,height=15)
        self.inventory_tree['columns'] = ("ID", "Name", "Qty", "re-order","inventory-type")
        column_width = 120

        # Formatting columns
        self.inventory_tree.column("#0", width=0, minwidth=0)
        self.inventory_tree.column("ID", anchor='center', width=90, minwidth=90)
        self.inventory_tree.column("Name", anchor='w', width=column_width, minwidth=column_width)
        self.inventory_tree.column("Qty",  anchor='w', width=35, minwidth=35)
        self.inventory_tree.column("re-order", anchor='center', width=column_width, minwidth=column_width)
        self.inventory_tree.column("inventory-type", anchor='w', width=column_width, minwidth=column_width)

        # Formatting Headers 
        self.inventory_tree.heading("ID", text="Item ID",anchor='w')
        self.inventory_tree.heading("Name", text="Item Name",anchor='center')
        self.inventory_tree.heading("Qty", text="Qty",anchor='center')
        self.inventory_tree.heading("re-order", text="Re-order level",anchor='e')
        self.inventory_tree.heading("inventory-type", text="Inventory type",anchor='e')

        # Add tag configurations for odd and even rows
        self.inventory_tree.tag_configure('oddrow', background='white', foreground='black')
        self.inventory_tree.tag_configure('evenrow', background='lightgray', foreground='black')



        # For loop to generate the values in the database 
        count = 0
        for record in inv_data:
            tag = 'evenrow' if count % 2 == 0 else 'oddrow'
            self.inventory_tree.insert(parent='', index='end', iid=count, text="", values=(record[0], record[1], record[2], record[3],record[4]), tags=(tag,))
            count += 1

                    
        self.inventory_tree.bind("<Double-1>", self.onDoubleClickInventory)
        
        self.inventory_tree.pack(pady=10)
        
   # Edit cell value -----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
        
    def onDoubleClickInventory(self, event):
        rowId = self.inventory_tree.identify_row(event.y)
        columnId = self.inventory_tree.identify_column(event.x)
        if rowId and columnId:
            self.editWindowPopup(self.inventory_tree, rowId, columnId)

    def onDoubleClickStaff(self, event):
        rowId = self.staff_tree.identify_row(event.y)
        columnId = self.staff_tree.identify_column(event.x)
        if rowId and columnId:
            self.editWindowPopup(self.staff_tree, rowId, columnId)
        

    def editWindowPopup(self, tree, row_id, column_id):
        editWindow = Toplevel(self)
        editWindow.title("Edit Cell Value")
        editWindow.geometry("300x100")

        # Calculate column index
        column_index = int(column_id.replace('#', '')) - 1
        current_value = tree.item(row_id, 'values')[column_index]

        newValueUI = tk.Entry(editWindow)
        newValueUI.pack(pady=10)
        newValueUI.insert(0, current_value)
        
        saveButton = tk.Button(editWindow, text="Save", command=lambda: self.saveNewValue(tree, row_id, column_index, newValueUI.get(), editWindow))
        saveButton.pack()

    def saveNewValue(self, tree, row_id, column_index, new_value, edit_window):
        currentValues = list(tree.item(row_id, 'values'))
        currentValues[column_index] = new_value
        tree.item(row_id, values=currentValues)
        edit_window.destroy()


    # bottom bar -----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    def bottombar(self):
        bottomFrame = tk.Frame(self, borderwidth=7, relief=tk.FLAT, bg='black')
        bottomFrame.pack(fill=tk.X, side=tk.BOTTOM)
        bottom_label = tk.Label(bottomFrame, text="", bg='#1A1A1A')
        bottom_label.pack()

if __name__ == "__main__":
    app = App()
    app.mainloop()
